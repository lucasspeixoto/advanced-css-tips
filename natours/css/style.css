@charset "UTF-8";
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 62.5%;
  /* 10/ 16 0.625 * 16 px 
  (font-size default) = 10px que nós queremos */
  /* font-size: 10px <--> Com o font-size de
  nosso documento sendo 10px, 1rem = 10px
  (Igual ao font-size do nosso
  root). */ }

body {
  box-sizing: border-box;
  /* Bordas não serão incluídas na altura e largura totais */ }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /* 1.7x maior que o line-height pré definido */
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Evita o 'shaking' dos elementos com animatiob, um comportamento não
  muito claro */ }
  .heading-primary--main {
    display: block;
    /*  Com display block o elemento vai ocupar todo o espaço disponível*/
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-in;
    /* Inicia rápido e termina devagar, oposto de ease-out */
    /*  animation-iteration-count: 3;
    animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.btn:link, .btn:visited {
  /* :visited - Tom roxo em links depois de visitados */
  text-transform: uppercase;
  text-decoration: none;
  font-size: 1.6rem;
  padding: 1.5rem 4rem;
  margin-top: 6rem;
  display: inline-block;
  /* Display inline-block é
    util quando queremos  ter um elemento com características de display inline como ocupação do espaço apenas do seu conteudo, mas queremos acrescentar algumas propriedades de display block, como margin, padding, etc... Que só funcionam em
    elementos com display block */
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  /* Para ser relatio para nosso btn::after e btn-white::after */ }

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* Atrás do botão */
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
  /* 'animation-fill-mode: backwards' para deixar o 
    botão invisíbel antes da animação */ }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.6), rgba(40, 180, 133, 0.6)), url(../img/hero.jpg);
  background-size: cover;
  /* Ajusta o elemento
  para 'caber' na tela */
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }
